/*
 * Copyright 2009-2017 Alibaba Cloud All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <alibabacloud/aegis/model/DescribeVulnerabilitySummaryResult.h>
#include <json/json.h>

using namespace AlibabaCloud::Aegis;
using namespace AlibabaCloud::Aegis::Model;

DescribeVulnerabilitySummaryResult::DescribeVulnerabilitySummaryResult() :
	ServiceResult()
{}

DescribeVulnerabilitySummaryResult::DescribeVulnerabilitySummaryResult(const std::string &payload) :
	ServiceResult()
{
	parse(payload);
}

DescribeVulnerabilitySummaryResult::~DescribeVulnerabilitySummaryResult()
{}

void DescribeVulnerabilitySummaryResult::parse(const std::string &payload)
{
	Json::CharReaderBuilder builder;
	Json::CharReader *reader = builder.newCharReader();
	Json::Value *val;
	Json::Value value;
	JSONCPP_STRING *errs;
	reader->parse(payload.data(), payload.data() + payload.size(), val, errs);
	value = *val;
	setRequestId(value["RequestId"].asString());
	if(!value["Success"].isNull())
		success_ = value["Success"].asString() == "true";
	if(!value["SuggestionCount"].isNull())
		suggestionCount_ = std::stol(value["SuggestionCount"].asString());
	if(!value["LowCount"].isNull())
		lowCount_ = std::stol(value["LowCount"].asString());
	if(!value["MediumCount"].isNull())
		mediumCount_ = std::stol(value["MediumCount"].asString());
	if(!value["HighCount"].isNull())
		highCount_ = std::stol(value["HighCount"].asString());
	if(!value["TotalCount"].isNull())
		totalCount_ = std::stol(value["TotalCount"].asString());
	if(!value["ConcernCount"].isNull())
		concernCount_ = std::stol(value["ConcernCount"].asString());

}

long DescribeVulnerabilitySummaryResult::getTotalCount()const
{
	return totalCount_;
}

long DescribeVulnerabilitySummaryResult::getHighCount()const
{
	return highCount_;
}

long DescribeVulnerabilitySummaryResult::getLowCount()const
{
	return lowCount_;
}

long DescribeVulnerabilitySummaryResult::getConcernCount()const
{
	return concernCount_;
}

long DescribeVulnerabilitySummaryResult::getMediumCount()const
{
	return mediumCount_;
}

bool DescribeVulnerabilitySummaryResult::getSuccess()const
{
	return success_;
}

long DescribeVulnerabilitySummaryResult::getSuggestionCount()const
{
	return suggestionCount_;
}

